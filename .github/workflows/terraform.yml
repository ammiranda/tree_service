name: 'Terraform'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  contents: read
  pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-2
  TF_WORKSPACE: default
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend-config="bucket=tree-service-terraform-state" -backend-config="key=terraform.tfstate" -backend-config="region=us-east-2" -backend-config="dynamodb_table=tree-service-terraform-locks"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
      run: terraform plan -no-color
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })

    - name: Check for stale locks
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'))
      run: |
        # Get the lock info
        LOCK_INFO=$(aws dynamodb get-item \
          --table-name tree-service-terraform-locks \
          --key '{"LockID": {"S": "tree-service-terraform-state/terraform.tfstate"}}' \
          --region us-east-2 2>/dev/null || echo "")
        
        if [ ! -z "$LOCK_INFO" ]; then
          # Extract the lock creation time
          CREATED_TIME=$(echo $LOCK_INFO | jq -r '.Item.Info.M.Created.S // empty')
          
          if [ ! -z "$CREATED_TIME" ]; then
            # Convert to Unix timestamp
            LOCK_TIME=$(date -jf "%Y-%m-%d %H:%M:%S" "${CREATED_TIME%%.*}" +%s 2>/dev/null || date -d "${CREATED_TIME%%.*}" +%s)
            CURRENT_TIME=$(date +%s)
            
            # If lock is older than 10 minutes, force unlock
            if [ $((CURRENT_TIME - LOCK_TIME)) -gt 600 ]; then
              echo "Found stale lock, forcing unlock..."
              terraform force-unlock -force $(echo $LOCK_INFO | jq -r '.Item.ID.S')
            fi
          fi
        fi

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'))
      id: apply
      run: |
        # Function to run terraform apply with retries
        run_apply() {
          local max_attempts=3
          local attempt=1
          local success=false
          
          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
            echo "Attempt $attempt of $max_attempts to run terraform apply"
            
            # Run apply with output capture
            if terraform apply -auto-approve -no-color 2>&1 | tee apply.log; then
              success=true
              break
            fi
            
            # Check for lock error
            if grep -q "Error acquiring the state lock" apply.log; then
              echo "Lock error detected, waiting before retry..."
              sleep 30
            else
              # If it's not a lock error, exit immediately
              exit 1
            fi
            
            attempt=$((attempt + 1))
          done
          
          if [ "$success" = false ]; then
            echo "Failed to acquire lock after $max_attempts attempts"
            exit 1
          fi
        }
        
        # Run the apply with retries
        run_apply

    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: |
        # Function to run terraform destroy with retries
        run_destroy() {
          local max_attempts=3
          local attempt=1
          local success=false
          
          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
            echo "Attempt $attempt of $max_attempts to run terraform destroy"
            
            # Run destroy with output capture
            if terraform destroy -auto-approve -no-color 2>&1 | tee destroy.log; then
              success=true
              break
            fi
            
            # Check for lock error
            if grep -q "Error acquiring the state lock" destroy.log; then
              echo "Lock error detected, waiting before retry..."
              sleep 30
            else
              # If it's not a lock error, exit immediately
              exit 1
            fi
            
            attempt=$((attempt + 1))
          done
          
          if [ "$success" = false ]; then
            echo "Failed to acquire lock after $max_attempts attempts"
            exit 1
          fi
        }
        
        # Run the destroy with retries
        run_destroy 